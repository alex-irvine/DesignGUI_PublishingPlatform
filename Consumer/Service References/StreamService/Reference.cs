//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Consumer.StreamService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StreamService.IStreamService")]
    public interface IStreamService {
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamService/DownloadFile", ReplyAction="http://tempuri.org/IStreamService/DownloadFileResponse")]
        Consumer.StreamService.RemoteFileInfo DownloadFile(Consumer.StreamService.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamService/DownloadFile", ReplyAction="http://tempuri.org/IStreamService/DownloadFileResponse")]
        System.Threading.Tasks.Task<Consumer.StreamService.RemoteFileInfo> DownloadFileAsync(Consumer.StreamService.DownloadRequest request);
        
        // CODEGEN: Generating message contract since the operation UploadFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamService/UploadFile", ReplyAction="http://tempuri.org/IStreamService/UploadFileResponse")]
        Consumer.StreamService.UploadFileResponse UploadFile(Consumer.StreamService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamService/UploadFile", ReplyAction="http://tempuri.org/IStreamService/UploadFileResponse")]
        System.Threading.Tasks.Task<Consumer.StreamService.UploadFileResponse> UploadFileAsync(Consumer.StreamService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamService/UploadFileToDropbox", ReplyAction="http://tempuri.org/IStreamService/UploadFileToDropboxResponse")]
        void UploadFileToDropbox();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamService/UploadFileToDropbox", ReplyAction="http://tempuri.org/IStreamService/UploadFileToDropboxResponse")]
        System.Threading.Tasks.Task UploadFileToDropboxAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamService/DownloadFileFromDropbox", ReplyAction="http://tempuri.org/IStreamService/DownloadFileFromDropboxResponse")]
        System.IO.Stream DownloadFileFromDropbox();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamService/DownloadFileFromDropbox", ReplyAction="http://tempuri.org/IStreamService/DownloadFileFromDropboxResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileFromDropboxAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string FileName) {
            this.FileName = FileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, long Length, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStreamServiceChannel : Consumer.StreamService.IStreamService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StreamServiceClient : System.ServiceModel.ClientBase<Consumer.StreamService.IStreamService>, Consumer.StreamService.IStreamService {
        
        public StreamServiceClient() {
        }
        
        public StreamServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StreamServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StreamServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StreamServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Consumer.StreamService.RemoteFileInfo Consumer.StreamService.IStreamService.DownloadFile(Consumer.StreamService.DownloadRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public long DownloadFile(ref string FileName, out System.IO.Stream FileByteStream) {
            Consumer.StreamService.DownloadRequest inValue = new Consumer.StreamService.DownloadRequest();
            inValue.FileName = FileName;
            Consumer.StreamService.RemoteFileInfo retVal = ((Consumer.StreamService.IStreamService)(this)).DownloadFile(inValue);
            FileName = retVal.FileName;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Consumer.StreamService.RemoteFileInfo> Consumer.StreamService.IStreamService.DownloadFileAsync(Consumer.StreamService.DownloadRequest request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Consumer.StreamService.RemoteFileInfo> DownloadFileAsync(string FileName) {
            Consumer.StreamService.DownloadRequest inValue = new Consumer.StreamService.DownloadRequest();
            inValue.FileName = FileName;
            return ((Consumer.StreamService.IStreamService)(this)).DownloadFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Consumer.StreamService.UploadFileResponse Consumer.StreamService.IStreamService.UploadFile(Consumer.StreamService.RemoteFileInfo request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string FileName, long Length, System.IO.Stream FileByteStream) {
            Consumer.StreamService.RemoteFileInfo inValue = new Consumer.StreamService.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            Consumer.StreamService.UploadFileResponse retVal = ((Consumer.StreamService.IStreamService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Consumer.StreamService.UploadFileResponse> Consumer.StreamService.IStreamService.UploadFileAsync(Consumer.StreamService.RemoteFileInfo request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Consumer.StreamService.UploadFileResponse> UploadFileAsync(string FileName, long Length, System.IO.Stream FileByteStream) {
            Consumer.StreamService.RemoteFileInfo inValue = new Consumer.StreamService.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            return ((Consumer.StreamService.IStreamService)(this)).UploadFileAsync(inValue);
        }
        
        public void UploadFileToDropbox() {
            base.Channel.UploadFileToDropbox();
        }
        
        public System.Threading.Tasks.Task UploadFileToDropboxAsync() {
            return base.Channel.UploadFileToDropboxAsync();
        }
        
        public System.IO.Stream DownloadFileFromDropbox() {
            return base.Channel.DownloadFileFromDropbox();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileFromDropboxAsync() {
            return base.Channel.DownloadFileFromDropboxAsync();
        }
    }
}
